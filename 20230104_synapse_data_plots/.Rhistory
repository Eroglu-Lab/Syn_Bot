true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(i in length(true_colocs)){
currentTrueX <- true_colocs$x[i]
currentTrueY <- true_colocs$y[i]
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#for each image
for(m in length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(i in length(true_colocs)){
currentTrueX <- true_colocs$x[i]
currentTrueY <- true_colocs$y[i]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
length(colocDataIn[[1]])
length(colocDataIn[[1]]$colocX)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in length(colocDataIn[[1]]$colocX)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(i in length(true_colocs)){
currentTrueX <- true_colocs$x[i]
currentTrueY <- true_colocs$y[i]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#for each image
for(m in length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(i in length(true_colocs)){
currentTrueX <- true_colocs$x[i]
currentTrueY <- true_colocs$y[i]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
length(true_colocs)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in length(true_colocs)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
length(currentData)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in length(true_colocs)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
print(currentTrueX)
print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
redDataIn <- lapply(redFiles, read.csv)
greenDataIn <- lapply(greenFiles, read.csv)
colocDataIn <- lapply(colocFiles, read.csv)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
#print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
View(output_df)
