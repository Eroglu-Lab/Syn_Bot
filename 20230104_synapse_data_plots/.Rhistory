geom_violin(fill = "yellow", aes(x = analysis_type, y = Colocalized.Puncta.Count))
#combine data into one data frame
combined_data <- rbind(manual_synbot_data, ilastik_data)
combined_data <- rbind(combined_data, synquant_data)
ggplot(data= combined_data, aes(x=analysis_type, y=Colocalized.Puncta.Count)) +
facet_grid(cols = vars(noise_level)) +
geom_hline(yintercept = 333, linetype = 2, color = "gray") +
geom_violin(fill = "yellow", aes(x = analysis_type, y = Colocalized.Puncta.Count)) +
labs(y = "colocalization of VGluT1 and PSD95") +
scale_color_manual(values = c("black", "black")) + theme(legend.position = "none")
#ggsave("C:/Users/savag/Duke Research Team Dropbox/Justin Savage/Team_Syn_Bot/20230103_figures/figure_5_in_vivo/invivo_a2d1_faceted.pdf", width = 6.5, height = 3.5)
#combine data into one data frame
combined_data <- rbind(manual_synbot_data, ilastik_data)
combined_data <- rbind(combined_data, synquant_data)
ggplot(data= combined_data, aes(x=analysis_type, y=Colocalized.Puncta.Count)) +
facet_grid(cols = vars(noise_level)) +
geom_hline(yintercept = 333, linetype = 2, color = "gray") +
geom_jitter(aes(x = analysis_type, y = Colocalized.Puncta.Count)) +
labs(y = "colocalization of VGluT1 and PSD95") +
scale_color_manual(values = c("black", "black")) + theme(legend.position = "none")
#ggsave("C:/Users/savag/Duke Research Team Dropbox/Justin Savage/Team_Syn_Bot/20230103_figures/figure_5_in_vivo/invivo_a2d1_faceted.pdf", width = 6.5, height = 3.5)
#ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
#  geom_dotplot(binaxis = "y", stackdir = "center")
ggplot(data = combined_data) +
#facet_grid(cols = vars(analysis_type)) +
geom_dotplot(binwidth = 5, binaxis = "y", stackdir = "center", aes(x = analysis_type, y = Colocalized.Puncta.Count)) +
geom_hline(yintercept = 333, linetype = 2, color = "gray")
ggplot(data = combined_data) +
#facet_grid(cols = vars(analysis_type)) +
geom_hline(yintercept = 333, linetype = 2, color = "black") +
geom_violin(fill = "yellow", aes(x = analysis_type, y = Colocalized.Puncta.Count))
#combine data into one data frame
combined_data <- rbind(manual_synbot_data, ilastik_data)
combined_data <- rbind(combined_data, synquant_data)
ggplot(data= combined_data, aes(x=analysis_type, y=Colocalized.Puncta.Count)) +
facet_grid(cols = vars(noise_level)) +
geom_hline(yintercept = 333, linetype = 2, color = "gray") +
geom_dotplot(binwidth = 5, binaxis = "y", stackdir = "center", aes(x = analysis_type, y = Colocalized.Puncta.Count)) +
labs(y = "colocalization of VGluT1 and PSD95") +
scale_color_manual(values = c("black", "black")) + theme(legend.position = "none")
#ggsave("C:/Users/savag/Duke Research Team Dropbox/Justin Savage/Team_Syn_Bot/20230103_figures/figure_5_in_vivo/invivo_a2d1_faceted.pdf", width = 6.5, height = 3.5)
#ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
#  geom_dotplot(binaxis = "y", stackdir = "center")
ggplot(data = combined_data) +
#facet_grid(cols = vars(analysis_type)) +
geom_dotplot(binwidth = 5, binaxis = "y", stackdir = "center", aes(x = analysis_type, y = Colocalized.Puncta.Count)) +
geom_hline(yintercept = 333, linetype = 2, color = "gray")
ggplot(data = combined_data) +
#facet_grid(cols = vars(analysis_type)) +
geom_hline(yintercept = 333, linetype = 2, color = "black") +
geom_violin(fill = "yellow", aes(x = analysis_type, y = Colocalized.Puncta.Count))
knitr::opts_chunk$set(echo = TRUE)
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
knitr::opts_chunk$set(echo = TRUE)
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
if("reshape" %in% rownames(installed.packages()) == FALSE)
{install.packages("reshape")}
library(reshape)
if("data.table" %in% rownames(installed.packages()) == FALSE)
{install.packages("data.table")}
library(data.table)
if("stringi" %in% rownames(installed.packages()) == FALSE)
{install.packages("stringi")}
library(stringi)
if("tidyverse" %in% rownames(installed.packages()) == FALSE)
{install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
redDataIn <- lapply(redFiles, read.csv)
greenDataIn <- lapply(greenFiles, read.csv)
colocDataIn <- lapply(colocFiles, read.csv)
View(greenDataIn)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
redDataIn <- lapply(redFiles, read.csv)
greenDataIn <- lapply(greenFiles, read.csv)
colocDataIn <- lapply(colocFiles, read.csv)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
redDataIn <- lapply(redFiles, read.csv)
greenDataIn <- lapply(greenFiles, read.csv)
colocDataIn <- lapply(colocFiles, read.csv)
true_colocs <- read.csv("sim_sparse_ground_truth.csv")
View(true_colocs)
redFiles
true_colocs <- read.csv("sim_sparse_ground_truth.csv")
output_df <- data.frame(redFiles)
View(output_df)
true_colocs <- read.csv("sim_sparse_ground_truth.csv")
output_df <- data.frame(redFiles)
colnames(output_df) <- c("images")
View(output_df)
true_colocs <- read.csv("sim_sparse_ground_truth.csv")
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
knitr::opts_chunk$set(echo = TRUE)
#read in ground truth data
true_colocs <- read.delim("simulated_data/red_truth.txt")
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt")
View(true_red)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- -1
output_df$false_pos_count <- -1
output_df$false_neg_count <- -1
output_df$true_neg_count <- -1
View(true_red)
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x <- as.integer(stri_split(currentString, ",")[1])
true_red$y <- as.integer(stri_split(currentString, ",")[2])
}
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x <- as.integer(stringi::stri_split(currentString, ",")[1])
true_red$y <- as.integer(stringi::stri_split(currentString, ",")[2])
}
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x <- as.integer(str_split(currentString, ",")[1])
true_red$y <- as.integer(str_split(currentString, ",")[2])
}
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x <- as.integer(strsplit(currentString, ",")[1])
true_red$y <- as.integer(strsplit(currentString, ",")[2])
}
strsplit(currentString, ",")
strsplit(currentString, ",")[1]
strsplit(currentString, ",")[1][1]
strsplit(currentString, ",")[[1]][1]
strsplit(currentString, ",")[[1]]
strsplit(currentString, ",")[[1]][1]
strsplit(currentString, ",")[[1]][2]
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y <- as.integer(strsplit(currentString, ",")[[1]][2])
}
View(true_red)
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#initailize output data frame
output_df <- data.frame(redFiles)
View(true_green)
View(true_red)
View(true_green)
View(true_red)
View(true_green)
View(true_green)
View(true_red)
View(true_green)
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
true_colocs <- filter(true_red, "coord_string" %in% true_green$coord_string)
true_colocs
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
if("reshape" %in% rownames(installed.packages()) == FALSE)
{install.packages("reshape")}
library(reshape)
if("data.table" %in% rownames(installed.packages()) == FALSE)
{install.packages("data.table")}
library(data.table)
if("stringi" %in% rownames(installed.packages()) == FALSE)
{install.packages("stringi")}
library(stringi)
if("tidyverse" %in% rownames(installed.packages()) == FALSE)
{install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
true_colocs <- filter(true_red, "coord_string" %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
View(true_colocs)
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
View(true_colocs)
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
if("reshape" %in% rownames(installed.packages()) == FALSE)
{install.packages("reshape")}
library(reshape)
if("data.table" %in% rownames(installed.packages()) == FALSE)
{install.packages("data.table")}
library(data.table)
if("stringi" %in% rownames(installed.packages()) == FALSE)
{install.packages("stringi")}
library(stringi)
if("tidyverse" %in% rownames(installed.packages()) == FALSE)
{install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
redDataIn <- lapply(redFiles, read.csv)
greenDataIn <- lapply(greenFiles, read.csv)
colocDataIn <- lapply(colocFiles, read.csv)
View(redDataIn)
length(redFiles)
redFiles[1]
redFiles[2]
redDataIn[1]
26.253
as.integer(26.253)
a = 1
b = 2
(-5 < a < 5)
if(-5 < a < 5){print("true")}
if(-5 < a){print("true")}
if(-5 < a || a < 5){print("true")}
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
View(colocDataIn)
knitr::opts_chunk$set(echo = TRUE)
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
