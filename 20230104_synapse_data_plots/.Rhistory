if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
#print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#add in empty images
empty_colocs_df <- data.frame(emptyColocList)
colnames(empty_colocs_df) <- c("image")
empty_colocs_df$true_pos_count <- 0
empty_colocs_df$false_pos_count <- 0
empty_colocs_df$false_neg_count <- length(true_colocs$coord_string)
empty_colocs_df$true_neg_count <- 0
output_df <- rbind(output_df, empty_colocs_df)
output_df$recall <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_neg_count)
#loaded RStudioAPI to use for selecting working directory
if("rstudioapi" %in% rownames(installed.packages()) == FALSE)
{install.packages("rstudioapi")}
library(rstudioapi)
if("xlsx" %in% rownames(installed.packages()) == FALSE)
{install.packages("xlsx")}
library(xlsx)
if("reshape" %in% rownames(installed.packages()) == FALSE)
{install.packages("reshape")}
library(reshape)
if("data.table" %in% rownames(installed.packages()) == FALSE)
{install.packages("data.table")}
library(data.table)
if("stringi" %in% rownames(installed.packages()) == FALSE)
{install.packages("stringi")}
library(stringi)
if("tidyverse" %in% rownames(installed.packages()) == FALSE)
{install.packages("tidyverse")}
library(tidyverse)
library(ggplot2)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
#check that all the files are not empty
emptyRedList <- c()
emptyGreenList <- c()
emptyColocList <- c()
fixedRedFiles <- c()
for(i in 1:length(redFiles)){
currentSize <- file.size(redFiles[i])
if(currentSize <= 2){
emptyRedList <- c(emptyRedList, redFiles[i])
}
if(currentSize > 2){
fixedRedFiles <- c(fixedRedFiles, redFiles[i])
}
}
fixedGreenFiles <- c()
for(i in 1:length(greenFiles)){
currentSize <- file.size(greenFiles[i])
if(currentSize <= 2){
emptyGreenList <- c(emptyGreenList, greenFiles[i])
}
if(currentSize > 2){
fixedGreenFiles <- c(fixedGreenFiles, greenFiles[i])
}
}
fixedColocFiles <- c()
for(i in 1:length(colocFiles)){
currentSize <- file.size(colocFiles[i])
if(currentSize <= 2){
emptyColocList <- c(emptyColocList, colocFiles[i])
}
if(currentSize > 2){
fixedColocFiles <- c(fixedColocFiles, colocFiles[i])
}
}
#"D:/Eroglu_lab/images/sim_sparse_ilastik_1/group/Output/KO_Pair1_L2R1_1-3_sim_0_00_colocResults_0.csv"
redDataIn <- lapply(fixedRedFiles, read.csv)
greenDataIn <- lapply(fixedGreenFiles, read.csv)
colocDataIn <- lapply(fixedColocFiles, read.csv)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(redFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#recall is true positive / (true positve + false negative)
#recall is the same as true positive rate
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
#print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#add in empty images
empty_colocs_df <- data.frame(emptyColocList)
colnames(empty_colocs_df) <- c("image")
empty_colocs_df$true_pos_count <- 0
empty_colocs_df$false_pos_count <- 0
empty_colocs_df$false_neg_count <- length(true_colocs$coord_string)
empty_colocs_df$true_neg_count <- 0
output_df <- rbind(output_df, empty_colocs_df)
output_df$recall <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_neg_count)
View(output_df)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(fixedColocFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#recall is true positive / (true positve + false negative)
#recall is the same as true positive rate
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
#print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#add in empty images
empty_colocs_df <- data.frame(emptyColocList)
colnames(empty_colocs_df) <- c("image")
empty_colocs_df$true_pos_count <- 0
empty_colocs_df$false_pos_count <- 0
empty_colocs_df$false_neg_count <- length(true_colocs$coord_string)
empty_colocs_df$true_neg_count <- 0
output_df <- rbind(output_df, empty_colocs_df)
output_df$recall <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_neg_count)
View(output_df)
#precision is true positive / (true positive + false positive)
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#true positives already counted
#print("true pos")
#output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
#if none of the true locations match this punctas location
if(match_found == FALSE){
#print("false neg")
output_df$false_pos_count[m] <- output_df$false_pos_count[m] + 1
}
}
}
output_df$precision <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_pos_count)
View(output_df)
# change NaN values to zero
output_df$precision[is.na(output_df$precision)] <- 0
# change NaN values to zero
output_df$precision[which(is.na(output_df$precision))] <- 0
which(is.na(output_df$precision))
is.na(output_df$precision)
is.nan(output_df$precision)
output_df$precision
View(output_df)
dataFile <- selectDirectory(
caption = "Select Directory",
label = "Select",
path = getActiveProject()
)
setwd(dataFile)
allFiles <- dir()
imageIndices <- 0
for (i in 1:length(allFiles)){
currentFile <- allFiles[i]
imageIndices <- append(imageIndices, i)
}
for(i in 2:length(imageIndices)){
if(i == 2){
imageFiles <- allFiles[imageIndices[i]]
}
if(i != 2){
imageFiles <- append(imageFiles, allFiles[imageIndices[i]])
}
}
#imageFiles is all folders
for(i in 1:length(imageFiles)) {
currentFile <- imageFiles[i]
pathOutput <- paste(currentFile, 'Output', sep = "/")
if (i == 1) {
fileList <- dir(pathOutput)
for(j in 1:length(fileList)){
fileList[j] <- paste(pathOutput, fileList[j], sep = "/")
}
}
if (i != 1) {
newFiles <- dir(pathOutput)
for(j in 1:length(newFiles)){
newFiles[j] <- paste(pathOutput, newFiles[j], sep = "/")
}
fileList <- append(fileList, newFiles)
}
}
#redFiles and greenFiles stores the names of images
redFiles <- str_subset(fileList, pattern = 'redResults')
greenFiles <- str_subset(fileList, pattern = 'greenResults')
colocFiles <- str_subset(fileList, pattern = 'colocResults')
#check that all the files are not empty
emptyRedList <- c()
emptyGreenList <- c()
emptyColocList <- c()
fixedRedFiles <- c()
for(i in 1:length(redFiles)){
currentSize <- file.size(redFiles[i])
if(currentSize <= 2){
emptyRedList <- c(emptyRedList, redFiles[i])
}
if(currentSize > 2){
fixedRedFiles <- c(fixedRedFiles, redFiles[i])
}
}
fixedGreenFiles <- c()
for(i in 1:length(greenFiles)){
currentSize <- file.size(greenFiles[i])
if(currentSize <= 2){
emptyGreenList <- c(emptyGreenList, greenFiles[i])
}
if(currentSize > 2){
fixedGreenFiles <- c(fixedGreenFiles, greenFiles[i])
}
}
fixedColocFiles <- c()
for(i in 1:length(colocFiles)){
currentSize <- file.size(colocFiles[i])
if(currentSize <= 2){
emptyColocList <- c(emptyColocList, colocFiles[i])
}
if(currentSize > 2){
fixedColocFiles <- c(fixedColocFiles, colocFiles[i])
}
}
#"D:/Eroglu_lab/images/sim_sparse_ilastik_1/group/Output/KO_Pair1_L2R1_1-3_sim_0_00_colocResults_0.csv"
redDataIn <- lapply(fixedRedFiles, read.csv)
greenDataIn <- lapply(fixedGreenFiles, read.csv)
colocDataIn <- lapply(fixedColocFiles, read.csv)
#read in ground truth data
true_red <- read.delim("simulated_data/red_truth.txt", header = FALSE)
colnames(true_red) <- c("coord_string")
true_red$x <- -1
true_red$y <- -1
true_green <- read.delim("simulated_data/green_truth.txt", header = FALSE)
colnames(true_green) <- c("coord_string")
true_green$x <- -1
true_green$y <- -1
for(i in 1:length(true_red$coord_string)){
currentString <- true_red$coord_string[i]
true_red$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_red$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
for(i in 1:length(true_green$coord_string)){
currentString <- true_green$coord_string[i]
true_green$x[i] <- as.integer(strsplit(currentString, ",")[[1]][1])
true_green$y[i] <- as.integer(strsplit(currentString, ",")[[1]][2])
}
#intersect red and green puncta coordinates to see true colocs
true_colocs <- filter(true_red, coord_string %in% true_green$coord_string)
#initailize output data frame
output_df <- data.frame(fixedColocFiles)
colnames(output_df) <- c("image")
output_df$true_pos_count <- 0
output_df$false_pos_count <- 0
output_df$false_neg_count <- 0
output_df$true_neg_count <- 0
#recall is true positive / (true positve + false negative)
#recall is the same as true positive rate
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#print("true pos")
output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
if(match_found == FALSE){
#print("false neg")
output_df$false_neg_count[m] <- output_df$false_neg_count[m] + 1
}
}
}
#add in empty images
empty_colocs_df <- data.frame(emptyColocList)
colnames(empty_colocs_df) <- c("image")
empty_colocs_df$true_pos_count <- 0
empty_colocs_df$false_pos_count <- 0
empty_colocs_df$false_neg_count <- length(true_colocs$coord_string)
empty_colocs_df$true_neg_count <- 0
output_df <- rbind(output_df, empty_colocs_df)
output_df$recall <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_neg_count)
# change NaN values to zero
output_df$recall[which(is.na(output_df$recall))] <- 0
#precision is true positive / (true positive + false positive)
#for each image
for(m in 1:length(colocDataIn)){
currentData = colocDataIn[[m]]
#for each puncta in the image
for(j in 1:length(currentData$colocX)){
currentX <- currentData$colocX[j]
currentY <- currentData$colocY[j]
#set match_found to false and then set it to true if any of the puncta overlap the truth
match_found <- FALSE
#for each location in the ground truth
for(ii in 1:length(true_colocs$coord_string)){
currentTrueX <- true_colocs$x[ii]
currentTrueY <- true_colocs$y[ii]
#print(currentTrueX)
#print(currentTrueY)
if(currentX > (currentTrueX - 5) && currentX < (currentTrueX + 5)){
if(currentY > (currentTrueY - 5) && currentY < (currentTrueY + 5)){
match_found <- TRUE
}
}
}
if(match_found == TRUE){
#true positives already counted
#print("true pos")
#output_df$true_pos_count[m] <- output_df$true_pos_count[m] + 1
}
#if none of the true locations match this punctas location
if(match_found == FALSE){
#print("false neg")
output_df$false_pos_count[m] <- output_df$false_pos_count[m] + 1
}
}
}
output_df$precision <- output_df$true_pos_count/(output_df$true_pos_count+output_df$false_pos_count)
# change NaN values to zero
output_df$precision[which(is.na(output_df$precision))] <- 0
View(true_green)
View(output_df)
#initialize columns
output_df$condition <- "unknown"
output_df$noise_level <- "unknown"
#label data with experimental condition
output_df[which(grepl("*WT*", output_df$image)),]$condition <- "WT"
#initialize columns
output_df$noise_level <- "unknown"
#lable data with noise level
output_df[which(grepl("0_00", output_df$image)),]$noise_level <- "0.00"
output_df[which(grepl("0_25", output_df$image)),]$noise_level <- "0.25"
